{# templates/swipe/index.html.twig #}
{% extends 'base.html.twig' %}

{% block title %}Maturelly - DÃ©couvrez des profils{% endblock %}

{% block stylesheets %}
{{ parent() }}
<style>
.profile-card {
 transition: transform 0.3s ease;
}
.profile-card.swiped-left {
 transform: translateX(-150%) rotate(-30deg);
}
.profile-card.swiped-right {
 transform: translateX(150%) rotate(30deg);
}
.fade-in {
 animation: fadeIn 0.5s ease-in;
}
@keyframes fadeIn {
 from { opacity: 0; }
 to { opacity: 1; }
}
.match-animation {
 animation: matchPop 0.5s cubic-bezier(0.68, -0.55, 0.265, 1.55);
}
@keyframes matchPop {
 0% { transform: scale(0.5); opacity: 0; }
 70% { transform: scale(1.1); }
 100% { transform: scale(1); opacity: 1; }
}
@keyframes confetti {
 0% { transform: translateY(0) rotateZ(0); opacity: 1; }
 100% { transform: translateY(1000px) rotateZ(720deg); opacity: 0; }
}
.confetti {
 position: fixed;
 width: 10px;
 height: 10px;
 pointer-events: none;
}
.confetti-animation {
 animation: confetti 3s ease-out forwards;
}
</style>
{% endblock %}

{% block body %}
<div class="min-h-screen bg-navy-900 pt-16">
   <div class="container mx-auto px-4">
       <div id="profile-container" class="max-w-lg mx-auto">
           <div class="profile-card relative">
               <div class="relative rounded-2xl overflow-hidden shadow-2xl bg-white">
                <img id="profile-picture" src="" class="w-full h-[600px] object-cover">
   
                   <!-- Swipe Indicators -->
                   <div class="absolute inset-0 pointer-events-none flex justify-between items-center px-8">
                       <div class="swipe-left-indicator opacity-0 transition-opacity">
                           <div class="bg-red-500/90 backdrop-blur w-16 h-16 rounded-full flex items-center justify-center">
                               <span class="material-icons text-white text-3xl">close</span>
                           </div>
                       </div>
                       <div class="swipe-right-indicator opacity-0 transition-opacity">
                           <div class="bg-primary/90 backdrop-blur w-16 h-16 rounded-full flex items-center justify-center">
                               <span class="material-icons text-white text-3xl">favorite</span>
                           </div>
                       </div>
                   </div>

                   <div class="absolute bottom-0 left-0 right-0 p-8 bg-gradient-to-t from-black/90 to-transparent">
                    <h2 class="text-3xl text-white font-bold mb-2" id="profile-name-age"></h2>
                      <div class="flex items-center space-x-2 text-white/90">
                           <span class="material-icons">place</span>
                           <p id="profile-location"></p>
                       </div>
                       <p id="profile-description" class="text-white/80 mt-2"></p>
                   </div>
               </div>
               
               <div class="flex justify-center gap-12 mt-8">
                   <button class="dislike-btn bg-white/10 hover:bg-white/20 p-5 rounded-full shadow-lg transition-all transform hover:scale-110">
                       <span class="material-icons text-red-500 text-4xl">close</span>
                   </button>
                   <button class="like-btn bg-white/10 hover:bg-white/20 p-5 rounded-full shadow-lg transition-all transform hover:scale-110">
                       <span class="material-icons text-primary text-4xl">favorite</span>
                   </button>
               </div>
           </div>
       </div>
   </div>
   
   <!-- Match Modal -->
   <div id="match-modal" class="hidden fixed inset-0 bg-navy-900/95 flex items-center justify-center z-50">
       <div id="confetti-container" class="fixed inset-0 pointer-events-none"></div>
       <div class="bg-white rounded-2xl p-10 max-w-md w-full mx-4 match-animation">
           <div class="text-center">
               <div class="flex justify-center mb-6">
                   <span class="material-icons text-primary text-6xl animate-bounce">favorite</span>
               </div>
               <h3 class="text-4xl font-bold text-navy-900 mb-4">C'est un Match! ðŸŽ‰</h3>
               <p class="text-gray-600 text-lg mb-8">Vous avez matchÃ© avec <span id="matched-name" class="font-semibold text-primary"></span></p>
               <div class="flex justify-center gap-4">
                   <button onclick="closeMatchModal()" class="px-8 py-3 bg-gray-100 rounded-full hover:bg-gray-200 transition-all transform hover:scale-105">
                       Plus tard
                   </button>
                   <button onclick="startChat()" class="px-8 py-3 bg-primary text-white rounded-full hover:bg-primary/90 transition-all transform hover:scale-105 shadow-lg">
                       Discuter maintenant
                   </button>
               </div>
           </div>
       </div>
   </div>
</div>
{% endblock %}

{% block javascripts %}
{{ parent() }}
<script>
let currentProfileIndex = 0;
let profiles = [];
let isDragging = false;
let startX = 0;
let currentX = 0;

function createConfetti() {
   const colors = ['#FF577F', '#FF884B', '#FFD384', '#FFF9B0'];
   const confettiCount = 100;
   const container = document.getElementById('confetti-container');
   
   container.innerHTML = '';
   for(let i = 0; i < confettiCount; i++) {
       const confetti = document.createElement('div');
       confetti.className = 'confetti confetti-animation';
       confetti.style.backgroundColor = colors[Math.floor(Math.random() * colors.length)];
       confetti.style.left = Math.random() * 100 + 'vw';
       confetti.style.animationDelay = Math.random() * 3 + 's';
       confetti.style.transform = `rotate(${Math.random() * 360}deg)`;
       container.appendChild(confetti);
   }
   
   setTimeout(() => {
       container.innerHTML = '';
   }, 6000);
}

async function loadProfiles() {
   try {
       const response = await fetch('/swipe/all-profiles');
       const data = await response.json();
       profiles = data.profiles;
       displayCurrentProfile();
   } catch (error) {
       console.error('Error loading profiles:', error);
   }
}

function displayCurrentProfile() {
   const container = document.getElementById('profile-container');
   if (currentProfileIndex >= profiles.length) {
       container.innerHTML = `
           <div class="text-center py-12 fade-in">
               <span class="material-icons text-primary text-6xl mb-4">sentiment_satisfied</span>
               <h2 class="text-2xl text-white font-bold mb-2">Plus de profils disponibles</h2>
               <p class="text-white/70">Revenez plus tard pour dÃ©couvrir de nouveaux profils !</p>
           </div>
       `;
       return;
   }
   
   const profile = profiles[currentProfileIndex];
   document.getElementById('profile-name-age').textContent = `${profile.name}, ${profile.age} ans`;
   document.getElementById('profile-location').textContent = profile.location;
   document.getElementById('profile-description').textContent = profile.description;
   document.getElementById('profile-picture').setAttribute('src', profile.photo);
}

async function handleLike() {
   const profile = profiles[currentProfileIndex];
   const card = document.querySelector('.profile-card');

   try {
       const response = await fetch(`/swipe/like/${profile.id}`, {
           method: 'POST',
           headers: { 'X-Requested-With': 'XMLHttpRequest' }
       });

       const data = await response.json();
       card.classList.add('swiped-right');
       
       if (data.isMatch) {
           document.getElementById('matched-name').textContent = profile.name;
           setTimeout(() => {
               document.getElementById('match-modal').classList.remove('hidden');
               createConfetti();
           }, 500);
       }
   } catch (error) {
       console.error('Error:', error);
   }

   setTimeout(() => {
       card.classList.remove('swiped-right');
       currentProfileIndex++;
       displayCurrentProfile();
   }, 300);
}

async function handleDislike() {
    const profile = profiles[currentProfileIndex];
    const card = document.querySelector('.profile-card');

    try {
        const response = await fetch(`/swipe/dislike/${profile.id}`, {
            method: 'POST',
            headers: {
                'X-Requested-With': 'XMLHttpRequest'
            }
        });

        if (!response.ok) {
            throw new Error('Network response was not ok');
        }

        card.classList.add('swiped-left');
    } catch (error) {
        console.error('Error:', error);
    }

    setTimeout(() => {
        card.classList.remove('swiped-left');
        currentProfileIndex++;
        displayCurrentProfile();
    }, 300);
}

function initSwipeListeners() {
   const card = document.querySelector('.profile-card');
   
   card.addEventListener('mousedown', (e) => {
       isDragging = true;
       startX = e.pageX;
       card.style.transition = 'none';
   });
   
   document.addEventListener('mousemove', (e) => {
       if (!isDragging) return;
       
       currentX = e.pageX;
       const deltaX = currentX - startX;
       const rotation = deltaX * 0.1;
       
       card.style.transform = `translateX(${deltaX}px) rotate(${rotation}deg)`;
       
       // Show indicators
       if (deltaX < -50) {
           document.querySelector('.swipe-left-indicator').style.opacity = '1';
       } else if (deltaX > 50) {
           document.querySelector('.swipe-right-indicator').style.opacity = '1';
       } else {
           document.querySelectorAll('.swipe-left-indicator, .swipe-right-indicator')
               .forEach(el => el.style.opacity = '0');
       }
   });
   
   document.addEventListener('mouseup', () => {
       if (!isDragging) return;
       isDragging = false;
       
       const deltaX = currentX - startX;
       card.style.transition = 'transform 0.3s ease';
       
       if (deltaX < -100) {
           handleDislike();
       } else if (deltaX > 100) {
           handleLike();
       } else {
           card.style.transform = '';
       }
       
       document.querySelectorAll('.swipe-left-indicator, .swipe-right-indicator')
           .forEach(el => el.style.opacity = '0');
   });
}

function closeMatchModal() {
   document.getElementById('match-modal').classList.add('hidden');
}

function startChat() {
   window.location.href = '/chat';
}

document.addEventListener('DOMContentLoaded', () => {
   loadProfiles();
   initSwipeListeners();
   
   document.querySelector('.like-btn').addEventListener('click', handleLike);
   document.querySelector('.dislike-btn').addEventListener('click', handleDislike);
});
</script>
{% endblock %}